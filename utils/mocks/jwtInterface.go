// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	golang_jwtjwt "github.com/golang-jwt/jwt"

	mock "github.com/stretchr/testify/mock"
)

// IJwt is an autogenerated mock type for the IJwt type
type IJwt struct {
	mock.Mock
}

// GenerateJWT provides a mock function with given fields: userID, email, role
func (_m *IJwt) GenerateJWT(userID int, email string, role string) (string, error) {
	ret := _m.Called(userID, email, role)

	if len(ret) == 0 {
		panic("no return value specified for GenerateJWT")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string, string) (string, error)); ok {
		return rf(userID, email, role)
	}
	if rf, ok := ret.Get(0).(func(int, string, string) string); ok {
		r0 = rf(userID, email, role)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int, string, string) error); ok {
		r1 = rf(userID, email, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: tokenString
func (_m *IJwt) ValidateToken(tokenString string) (*golang_jwtjwt.Token, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *golang_jwtjwt.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*golang_jwtjwt.Token, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *golang_jwtjwt.Token); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang_jwtjwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIJwt creates a new instance of IJwt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIJwt(t interface {
	mock.TestingT
	Cleanup(func())
}) *IJwt {
	mock := &IJwt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
